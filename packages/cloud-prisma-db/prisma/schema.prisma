generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["linux-musl-openssl-3.0.x", "darwin-arm64"]
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withMiddleware = false
  withShield     = false
  output         = "../../shared-trpc/src/generated"
  contextPath    = "../../shared-trpc/src/context/prisma.context"
}

generator zod {
  provider    = "zod-prisma"
  modelSuffix = "CloudModel"
  output      = "../../shared-types/src/cloud-prisma-types"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev(cloud).db"
}

model Country {
  id        String     @id @default(uuid())
  name      String
  code      String
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id             String             @id @default(uuid())
  birthDay       DateTime
  name           String?
  locationId     String
  cardNumber     String             @unique
  isAllowed      Boolean            @default(false)
  memberShipType Int
  email          String
  location       Location           @relation(fields: [locationId], references: [id])
  visits         VisitsToLocation[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model VisitsToLocation {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Location {
  id        String             @id @default(uuid())
  name      String
  users     User[]
  devices   Devices[]
  lat       String
  long      String
  countryId String
  country   Country            @relation(fields: [countryId], references: [id])
  visits    VisitsToLocation[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Devices {
  id           String      @id @default(uuid())
  name         String
  deviceId     String
  locationId   String
  location     Location    @relation(fields: [locationId], references: [id])
  deviceType   DeviceTypes @relation(fields: [deviceTypeId], references: [id])
  deviceTypeId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model DeviceTypes {
  id        String    @id @default(uuid())
  name      String
  devices   Devices[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
